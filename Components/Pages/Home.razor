@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.EntityFrameworkCore
@using SyncfusionHelpDesk.Data;
@using SyncfusionHelpDesk.Models
@inject IDbContextFactory<SyncfusionHelpDeskContext> DbFactory
@inject SyncfusionHelpDeskService SyncfusionHelpDeskService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> _RoleManager
@inject EmailSender _EmailSender
@inject NavigationManager NavigationManager

@if (CurrentUser != "")
{
    <EditUserRole OnRoleChanged="HandleRoleChange" />
    <br />
    <p>You are: <b>@CurrentUser</b></p>
}

<SfToast ID="toast_default"
         @ref="ToastObj"
         Title="Help Desk Ticket"
         Content="@ToastContent" TimeOut="5000">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>
<h3>New Help Desk Ticket</h3>
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <SfDropDownList TItem="HelpDeskStatus" TValue="string"
                        PopupHeight="230px" Index=0
                        Placeholder="Ticket Status"
                        DataSource="@HelpDeskStatus.Statuses"
                        FloatLabelType="@FloatLabelType.Always"
                        @bind-Value="@objHelpDeskTicket.TicketStatus">
            <DropDownListFieldSettings Text="Text"
                                       Value="ID"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div>
        <SfDatePicker ID="TicketDate" Placeholder="Ticket Date"
                      FloatLabelType="@FloatLabelType.Always"
                      @bind-Value="@objHelpDeskTicket.TicketDate"
                      Max="DateTime.Now"
                      ShowClearButton="false"></SfDatePicker>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
    </div>
    <div>
        <SfTextBox Placeholder="Ticket Description"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketDescription"></SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
    </div>
    <div>
        <SfTextBox Placeholder="Requester Email"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketRequesterEmail"></SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketRequesterEmail)" />
    </div>
    <br />
    <div class="e-footer-content">
        <div class="button-container">
            <button type="submit" class="e-btn e-normal e-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
#nullable disable
    private string CurrentUser = "";
    string ADMINISTRATION_ROLE = "Administrators";

    SfToast ToastObj;
    private string ToastContent { get; set; } = "";

    HelpDeskTicket objHelpDeskTicket =
        new HelpDeskTicket() { TicketDate = DateTime.Now };

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var authState =
        await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // If the user is authenticated set the current user
        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
            // Set the current user
            CurrentUser = authState.User.Identity.Name;
        }
    }

    private void HandleRoleChange(bool isAdmin)
    {
        // Reload the entire page
        NavigationManager.NavigateTo("/", true);
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            // Create a HelpDeskTickets
            HelpDeskTicket NewHelpDeskTickets =
                new HelpDeskTicket();

            // Set the values to the values entered
            // in the form
            NewHelpDeskTickets.TicketDate =
                objHelpDeskTicket.TicketDate;
            NewHelpDeskTickets.TicketDescription =
                objHelpDeskTicket.TicketDescription;
            NewHelpDeskTickets.TicketRequesterEmail =
                objHelpDeskTicket.TicketRequesterEmail;
            NewHelpDeskTickets.TicketStatus =
                objHelpDeskTicket.TicketStatus;
            // Create a new GUID for this Help Desk Ticket
            NewHelpDeskTickets.TicketGuid =
                System.Guid.NewGuid().ToString();

            // Save the new Help Desk Ticket
            var result =
                SyncfusionHelpDeskService.CreateTicketAsync(DbFactory, NewHelpDeskTickets);

            // Clear the form
            objHelpDeskTicket = new HelpDeskTicket();

            // Show the Toast
            ToastContent = "Saved!";
            await Task.Delay(100);
            await this.ToastObj.ShowAsync();

            // Send Email
            await _EmailSender.SendEmail(
                "Help Desk Ticket Created",
                "", // No need to pass an email because it goes to Administrator
                NewHelpDeskTickets.TicketGuid
                );
        }
        catch (Exception ex)
        {
            ToastContent = ex.GetBaseException().Message;
            await this.ToastObj.ShowAsync();
        }
    }
} 