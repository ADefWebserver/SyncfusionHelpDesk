@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@using SyncfusionHelpDesk.Data;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject EmailSender _EmailSender
@inherits OwningComponentBase<SyncfusionHelpDeskService>

@if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
{
    <p>You are an Administrator named: <b>@CurrentUser.Identity.Name</b></p>
}
<EjsToast ID="toast_default"
          @ref="ToastObj"
          Title="Help Desk Ticket"
          Content="@ToastContent" TimeOut="5000">
    <ToastPosition X="Right"></ToastPosition>
</EjsToast>
<h3>New Help Desk Ticket</h3>
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <EjsDropDownList TItem="HelpDeskStatus" TValue="string" PopupHeight="230px" Index=0
                         Placeholder="Ticket Status" DataSource="@HelpDeskStatus.Statuses"
                         FloatLabelType="@FloatLabelType.Always"
                         @bind-Value="@objHelpDeskTicket.TicketStatus">
            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
        </EjsDropDownList>
    </div>
    <div>
        <EjsDatePicker ID="TicketDate" Placeholder="Ticket Date" FloatLabelType="@FloatLabelType.Always"
                       @bind-Value="@objHelpDeskTicket.TicketDate"
                       Max="DateTime.Now" ShowClearButton="false"></EjsDatePicker>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
    </div>
    <div>
        <EjsTextBox Placeholder="Ticket Description" FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@objHelpDeskTicket.TicketDescription"></EjsTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
    </div>
    <div>
        <EjsTextBox Placeholder="Requester Email" FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@objHelpDeskTicket.TicketRequesterEmail"></EjsTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketRequesterEmail)" />
    </div>
    <br /><br />
    <div class="e-footer-content">
        <div class="button-container">
            <button type="submit" class="e-btn e-normal e-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string ADMINISTRATION_ROLE = "Administrators";

    EjsToast ToastObj;
    private string ToastContent { get; set; }  = "";

    HelpDeskTicket objHelpDeskTicket = new HelpDeskTicket() { TicketDate = DateTime.Now };

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        var user = await _UserManager.FindByNameAsync("Admin@BlazorHelpWebsite.com");

        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

        CurrentUser = (await authenticationStateTask).User;
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            HelpDeskTickets NewHelpDeskTickets = new HelpDeskTickets();
            NewHelpDeskTickets.TicketDate = objHelpDeskTicket.TicketDate;
            NewHelpDeskTickets.TicketDescription = objHelpDeskTicket.TicketDescription;
            NewHelpDeskTickets.TicketRequesterEmail = objHelpDeskTicket.TicketRequesterEmail;
            NewHelpDeskTickets.TicketStatus = objHelpDeskTicket.TicketStatus;
            NewHelpDeskTickets.TicketGuid = System.Guid.NewGuid().ToString();

            var result = @Service.CreateTicketAsync(NewHelpDeskTickets);

            // Clear Form
            objHelpDeskTicket = new HelpDeskTicket();

            ToastContent = "Saved!";
            await Task.Delay(100);
            await this.ToastObj.Show();

            _EmailSender.SendEmail();
        }
        catch (Exception ex)
        {
            ToastContent = ex.GetBaseException().Message;
            await this.ToastObj.Show();
        }
    }
}