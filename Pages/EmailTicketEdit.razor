@page "/emailticketedit/{TicketGuid}"
@using Microsoft.Extensions.Configuration
@using System.Security.Claims;
@using SyncfusionHelpDesk.Data;
@inject EmailSender _EmailSender
@inject IConfiguration _configuration
@inherits OwningComponentBase<SyncfusionHelpDeskService>
<div id="target" style="height: 500px;">
    @if (!EditDialogVisibility)
    {
        <h2>Your response has been saved</h2>
        <h4>Thank You!</h4>
    }
</div>
<EjsDialog Target="#target" Width="500px" Height="500px"
           IsModal="true" ShowCloseIcon="true"
           Visible="EditDialogVisibility">
    <DialogTemplates>
        <Header> EDIT TICKET # @SelectedTicket.Id</Header>
        <Content>
            <EditTicket SelectedTicket="@SelectedTicket" />
        </Content>
        <FooterTemplate>
            <div class="button-container">
                <button type="submit"
                        class="e-btn e-normal e-primary"
                        @onclick="SaveTicket">
                    Save
                </button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</EjsDialog>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string TicketGuid { get; set; }

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    private HelpDeskTickets SelectedTicket = new HelpDeskTickets();
    private bool EditDialogVisibility = true;

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        CurrentUser = (await authenticationStateTask).User;
    }

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the Help Desk Ticket associated with
            // the GUID that was passed to the control
            SelectedTicket =
                await @Service.GetHelpDeskTicketAsync(TicketGuid);

            StateHasChanged();
        }
    }

    public async Task SaveTicket()
    {
        // Save the Help Desk Ticket
        var result = await @Service.UpdateTicketAsync(SelectedTicket);

        // Close the Dialog
        EditDialogVisibility = false;

        // Send Emails
        if (CurrentUser.Identity.IsAuthenticated)
        {
            if (CurrentUser.IsInRole("Administrators"))
            {
                // User an Administrator
                // Send email to Requester
                await _EmailSender.SendEmail(
                "Help Desk Ticket Updated",
                SelectedTicket.TicketRequesterEmail,
                SelectedTicket.TicketGuid
                );

                return;
            }
        }

        // User is not an Administrator
        // Send email to Administrator
        string AdministratorEmail = _configuration["SenderEmail"];

        await _EmailSender.SendEmail(
        "Help Desk Ticket Updated",
        AdministratorEmail,
        SelectedTicket.TicketGuid
        );
    }
}